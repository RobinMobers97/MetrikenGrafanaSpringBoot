server {
    listen 80 default_server;
    server_name localhost;
    root /usr/share/nginx/html;

    # gzip
    gzip             on;
    gzip_comp_level  2;
    gzip_min_length  1000;
    gzip_proxied     expired no-cache no-store private auth;
    gzip_types       text/plain application/x-javascript application/javascript text/xml text/css application/xml application/json application/xhtml+xml application/rss+xml text/x-component application/atom+xml image/svg+xml application/x-font-ttf font/opentype;# text/html included by default

    # X-Powered-By header entfernen
    proxy_hide_header X-Powered-By;

    # Server header entfernen
    server_tokens off;

    # Common http settings
    proxy_http_version 1.1;
    proxy_set_header Connection "";
    set_real_ip_from  10.0.0.0/8;
    set_real_ip_from  172.16.0.0/12;
    set_real_ip_from  192.168.0.0/16;
    real_ip_header    X-Forwarded-For;

    # Common cache config
    proxy_cache_revalidate on;
    proxy_pass_request_headers on;
    client_max_body_size 100m;
    proxy_temp_file_write_size 100m;

    # Docker DNS Resolver
    resolver 127.0.0.11 ipv6=off;
    resolver_timeout 3s;

    location /healthcheck {
        access_log /dev/null;
        # default_type muss gesetzt sein, da dieser Endpunkt sonst einen binary-download auslösen würde
        default_type 'text/html';
        return 200;
    }

    location /prim/ {
        proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-Prefix /prim/;

        set $prim "backend-primzahlen:60001";
        rewrite ^/prim/(.*) /$1 break;

        proxy_pass http://$prim;
        proxy_redirect http://$prim/ /prim/;
    }

    location /fibonacci/ {
        proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-Prefix /fibonacci/;

        set $fibonacci "backend-fibonacci:60002";
        rewrite ^/fibonacci/(.*) /$1 break;

        proxy_pass http://$fibonacci;
        proxy_redirect http://$fibonacci/ /fibonacci/;
    }


    # Frontend
    location / {
	set $frontend "frontend";
        rewrite ^/(.*) /$1 break;

        proxy_pass http://$frontend;
        proxy_redirect http://$frontend/ /;
    }

    error_page 404 /404.html;
}

